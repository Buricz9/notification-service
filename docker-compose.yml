services:
  db:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: notifications
      POSTGRES_USER: notif_user
      POSTGRES_PASSWORD: notif_pass
    ports:
      - "5432:5432"
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notif_user -d notifications"]
      interval: 5s
      timeout: 5s
      retries: 10

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  api:
    build: .
    command: /app/api
    restart: unless-stopped
    environment:
      PGHOST: db
      PGUSER: notif_user
      PGPASSWORD: notif_pass
      PGDATABASE: notifications
      REDIS_ADDR: redis:6379
      PORT: "8080"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"

  scheduler:
    build: .
    command: /app/scheduler
    restart: unless-stopped
    environment:
      PGHOST: db
      PGUSER: notif_user
      PGPASSWORD: notif_pass
      PGDATABASE: notifications
      REDIS_ADDR: redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  sender:
    build: .
    command: /app/sender
    restart: unless-stopped
    environment:
      REDIS_ADDR: redis:6379
    depends_on:
      redis:
        condition: service_healthy

  listener:
    build: .
    command: /app/listener
    restart: unless-stopped
    environment:
      PGHOST: db
      PGUSER: notif_user
      PGPASSWORD: notif_pass
      PGDATABASE: notifications
      REDIS_ADDR: redis:6379
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  db_data: